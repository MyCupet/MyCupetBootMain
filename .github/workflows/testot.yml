name: Java CI with Gradle and Docker Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-20.04

    env:
      DOCKER_IMAGE_NAME: my-cupet-boot-main

    steps:
      - name: Checkout 소스 코드
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew

      # 환경 변수 주입
      - name: Inject Environment Variables into application.properties
        run: |
          echo "server.port=${SERVER_PORT}" >> src/main/resources/application.properties
          echo "dispatch.ip=${DISPATCH_IP}" >> src/main/resources/application.properties
          echo "db.url=${DB_URL}" >> src/main/resources/application.properties
          echo "db.username=${DB_USERNAME}" >> src/main/resources/application.properties
          echo "db.password=${DB_PASSWORD}" >> src/main/resources/application.properties
          echo "s3.accesskey=${S3_ACCESSKEY}" >> src/main/resources/application.properties
          echo "s3.secretkey=${S3_SECRETKEY}" >> src/main/resources/application.properties
          echo "api.key=${API_KEY}" >> src/main/resources/application.properties
          echo "api.secret=${API_SECRET}" >> src/main/resources/application.properties

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE_NAME .
          docker tag $DOCKER_IMAGE_NAME ${{secrets.DOCKER_REPO}}:latest

      - name: Login to Docker registry
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push Docker image to registry
        run: docker push ${{secrets.DOCKER_REPO}}:latest

      - name: Deploy to NCP
        uses: appleboy/ssh-action@master
        with:
          host: ${{secrets.NCP_HOST}}
          username: ${{secrets.NCP_ID}}
          password: ${{secrets.NCP_PASSWORD}}
          port: 80
          script: |
            sudo docker stop $(sudo docker ps -q --filter ancestor=${{secrets.DOCKER_REPO}}:latest)
            sudo docker rm $(sudo docker ps -aq --filter ancestor=${{secrets.DOCKER_REPO}}:latest)
            sudo docker pull ${{secrets.DOCKER_REPO}}:latest
            sudo docker run -d -p 9090:80 ${{secrets.DOCKER_REPO}}:latest
            sudo docker image prune -f
