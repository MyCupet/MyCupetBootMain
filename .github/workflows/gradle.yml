name: Java CI with Gradle and Docker Deploy

on:
  push:
    branches:
      - main  # 배포하려는 브랜치 이름으로 변경 가능
  pull_request:
    branches:
      - main  # 풀 리퀘스트가 올라오면 테스트 실행

jobs:
  build:
    runs-on: ubuntu-20.04

    env:
      DOCKER_IMAGE_NAME: my-cupet-boot-main  # Docker 이미지 이름
    
    steps:
      - name: Checkout 소스 코드
        uses: actions/checkout@v2
    
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'
    
      - name: Grant execute permission for Gradlew
        run: chmod +x ./gradlew
    
      #환경변수 설정
      - name: Inject Environment Variables into application.properties
        run: |
          echo "server.port=${SERVER_PORT}" >> src/main/resources/application.properties
          echo "dispatch.ip=${DISPATCH_IP}" >> src/main/resources/application.properties
          echo "db.url=${DB_URL}" >> src/main/resources/application.properties
          echo "db.username=${DB_USERNAME}" >> src/main/resources/application.properties
          echo "db.password=${DB_PASSWORD}" >> src/main/resources/application.properties
          echo "s3.accesskey=${S3_ACCESSKEY}" >> src/main/resources/application.properties
          echo "s3.secretkey=${S3_SECRETKEY}" >> src/main/resources/application.properties
          echo "api.key=${API_KEY}" >> src/main/resources/application.properties
          echo "api.secret=${API_SECRET}" >> src/main/resources/application.properties
      - name: Build with Gradle
        run: ./gradlew clean build -x test


      - name: Login-to-Dokcer
        env:
          DOCKER_USERNAME: ${{secrets.DOCKERHUB_USERNAME}}
          DOCKER_TOKEN: ${{secrets.DOCKER_TOKEN}}
        run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USERNAME --password-stdin
    
      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE_NAME .
          docker tag $DOCKER_IMAGE_NAME ${{secrets.DOCKER_REPO}}:latest
    
      - name: Push Docker image to registry
        run: docker push ${{secrets.DOCKER_REPO}}:latest
        
  deploy:
    needs: build
    name: Deploy
    runs-on: ubuntu-latest  # Specify the appropriate runner for your deployment needs
    steps:
      - name: docker login
        uses: docker/login-action@v1
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKER_TOKEN}}
      
      - name: Stop and remove existing container
        run: |
          docker stop my-cupet-boot-main || true
          docker rm my-cupet-boot-main || true
      
      - name: Run Docker container
        run: |
          docker run -d -p 9090:9090 --name my-cupet-boot-main ${{secrets.DOCKER_REPO}}:latest
      
      - name: Clean up unused Docker images
        run: docker image prune -af
  
      
        
      
       
